from autoForecastVA.src.components.data_preprocessing_global.data_clustering_and_normalization import \
    DataCluseteringAndNormalization
from autoForecastVA.src.components.data_preprocessing_global.data_delimiting_by_day_and_medical_center import DataDelimitingByDayAndMedicalCenter
from autoForecastVA.src.components.data_preprocessing_global.data_imputation_and_averaging import \
    DataImputationAndAveraging
from autoForecastVA.src.components.data_preprocessing_global.data_preparation_for_feature_selection import DataPreparationForFeatureSelection
import unittest
import pandas as pd
class TestDataPreparationForFeatureSelection(unittest.TestCase):
    def test_toy_example(self):
        '''
        For the toy example, we create a dataset that has 4 features, 3 medical centers and there are 8 days for each medical center. We perform data delimiting specifying 3 test days for each day and medical center, and we predict 2 days ahead. We make the data for each medical center to be the same so it is easier to check for correctness because it makes the processed data to also be the same.

        We have deduced what the processed data should look like in below. The day-specific data generated by DataPreparationForFeatureSelection should all equal to their original and shifted data as shown below.

---first test day---
original train day
2020-01-03    111     1     2          5           1       1
2020-01-04    111     2     2          6           1       4
2020-01-05    111     3     3          7           1       6
2020-01-06    111     4     4          1           1      83

shifted train day
2020-01-05    111     3     3          7           1       6
2020-01-06    111     4     4          1           1      83

test day
2020-01-08    111     6     6          3           1      64

---second test day---
original train day
2020-01-03    111     1     2          5           1       1
2020-01-04    111     2     2          6           1       4
2020-01-05    111     3     3          7           1       6
2020-01-06    111     4     4          1           1      83
2020-01-07    111     5     5          2           1       5

shifted train day
2020-01-05    111     3     3          7           1       6
2020-01-06    111     4     4          1           1      83
2020-01-07    111     5     5          2           1       5

test day
2020-01-09    111     7     7          4           1       3

---third test day---
original train day
2020-01-03    111     1     2          5           1       1
2020-01-04    111     2     2          6           1       4
2020-01-05    111     3     3          7           1       6
2020-01-06    111     4     4          1           1      83
2020-01-07    111     5     5          2           1       5
2020-01-08    111     6     6          3           1      64

shifted train day
2020-01-05    111     3     3          7           1       6
2020-01-06    111     4     4          1           1      83
2020-01-07    111     5     5          2           1       5
2020-01-08    111     6     6          3           1      64

test day
2020-01-10    111     8     8          5           1       5
        '''
        number_of_days_for_testing = 3
        number_of_test_days_in_DataFrame = 1
        number_of_days_to_predict_ahead = 2
        dataset = pd.DataFrame({'date': ['2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08', '2020-01-09', '2020-01-10', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08', '2020-01-09', '2020-01-10', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08', '2020-01-09', '2020-01-10'],
                                'clinic': ['111', '111', '111', '111', '111', '111', '111', '111', '222', '222', '222', '222', '222', '222', '222', '222', '333', '333', '333', '333', '333', '333', '333', '333'],
                                'case': [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8], 'call': [2, 2, 3, 4, 5, 6, 7, 8, 2, 2, 3, 4, 5, 6, 7, 8, 2, 2, 3, 4, 5, 6, 7, 8], 'dayofweek': [5, 6, 7, 1, 2, 3, 4, 5, 5, 6, 7, 1, 2, 3, 4, 5, 5, 6, 7, 1, 2, 3, 4, 5], 'weekofyear': [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 'random':[1, 4, 6, 83, 5, 64, 3, 5, 1, 4, 6, 83, 5, 64, 3, 5, 1, 4, 6, 83, 5, 64, 3, 5]})

        dataset['date'] = pd.to_datetime(dataset.date, infer_datetime_format=True)
        dataset = dataset.set_index(['date'])

        first_original_train_day = dataset[dataset.clinic == '111'].loc['2020-01-03': '2020-01-06']
        first_shifted_train_day = dataset[dataset.clinic == '111'].loc['2020-01-05': '2020-01-06']
        second_original_train_day = dataset[dataset.clinic == '111'].loc['2020-01-03': '2020-01-07']
        second_shifted_train_day = dataset[dataset.clinic == '111'].loc['2020-01-05': '2020-01-07']
        third_original_train_day = dataset[dataset.clinic == '111'].loc['2020-01-03': '2020-01-08']
        third_shifted_train_day = dataset[dataset.clinic == '111'].loc['2020-01-05': '2020-01-08']

        example_day_level_original_DataFrame_dictionary = {}
        example_day_level_shifted_DataFrame_dictionary = {}

        example_day_level_original_DataFrame_dictionary[dataset.index[-3]] = first_original_train_day
        example_day_level_shifted_DataFrame_dictionary[dataset.index[-3]] = first_shifted_train_day
        example_day_level_original_DataFrame_dictionary[dataset.index[-2]] = second_original_train_day
        example_day_level_shifted_DataFrame_dictionary[dataset.index[-2]] = second_shifted_train_day
        example_day_level_original_DataFrame_dictionary[dataset.index[-1]] = third_original_train_day
        example_day_level_shifted_DataFrame_dictionary[dataset.index[-1]] = third_shifted_train_day

        dataDelimitingByDayAndMedicalCenter = DataDelimitingByDayAndMedicalCenter(dataset, number_of_days_for_testing, number_of_days_to_predict_ahead)
        day_level_medical_center_level_DataFrame_dictionary = dataDelimitingByDayAndMedicalCenter.get_day_level_medical_center_level_DataFrame_dictionary()

        dataPreparationForFeatureSelection = DataPreparationForFeatureSelection(day_level_medical_center_level_DataFrame_dictionary, number_of_test_days_in_DataFrame=number_of_test_days_in_DataFrame, number_of_days_to_predict_ahead=number_of_days_to_predict_ahead)
        found_day_level_medical_center_level_original_DataFrame_dictionary = dataPreparationForFeatureSelection.day_level_agency_level_original_train_DataFrame_dictionary
        found_day_level_medical_center_level_shifted_DataFrame_dictionary = dataPreparationForFeatureSelection.day_level_agency_level_shifted_train_DataFrame_dictionary

        for day in found_day_level_medical_center_level_original_DataFrame_dictionary.keys():
            for medical_center in found_day_level_medical_center_level_original_DataFrame_dictionary[day].keys():
                # do not check for medical center codes
                pd.testing.assert_frame_equal(example_day_level_original_DataFrame_dictionary[day].drop(columns='clinic'), found_day_level_medical_center_level_original_DataFrame_dictionary[day][medical_center].drop(columns='clinic'), check_dtype=False)
                pd.testing.assert_frame_equal(example_day_level_shifted_DataFrame_dictionary[day].drop(columns='clinic'), found_day_level_medical_center_level_shifted_DataFrame_dictionary[day][medical_center].drop(columns='clinic'), check_dtype=False)

    def test_medical_center_level_real_example(self):
        '''
        For each medical center and each day, assume the number of rows in a DataFrame is n. Then the number of rows in the original DataFrame is n - the number of test days in a DataFrame; the number of rows in the shifted DataFrame is n - the number of test days in a DataFrame - the number of days to predict ahead. The order of (date, medical center) should also be the same between the original and shifted DataFrames.
        '''
        number_of_days_for_testing = 3
        number_of_test_days_in_DataFrame = 1
        number_of_days_to_predict_ahead = 2
        dataset = DataImputationAndAveraging(dataset_path='../../../data/coviddata07292020.csv', number_of_days_for_data_averaging=3, filter_by_medical_center=False, filter_by_time_period=False).get_processed_dataset()
        dataDelimitingByDayAndMedicalCenter = DataDelimitingByDayAndMedicalCenter(dataset, number_of_days_for_testing, number_of_days_to_predict_ahead)
        day_level_medical_center_level_DataFrame_dictionary = dataDelimitingByDayAndMedicalCenter.get_day_level_medical_center_level_DataFrame_dictionary()

        dataPreparationForFeatureSelection = DataPreparationForFeatureSelection(day_level_medical_center_level_DataFrame_dictionary, number_of_test_days_in_DataFrame=number_of_test_days_in_DataFrame, number_of_days_to_predict_ahead=number_of_days_to_predict_ahead)
        found_day_level_medical_center_level_original_DataFrame_dictionary = dataPreparationForFeatureSelection.day_level_agency_level_original_train_DataFrame_dictionary
        found_day_level_medical_center_level_shifted_DataFrame_dictionary = dataPreparationForFeatureSelection.day_level_agency_level_shifted_train_DataFrame_dictionary

        for day in found_day_level_medical_center_level_original_DataFrame_dictionary.keys():
            for medical_center in found_day_level_medical_center_level_original_DataFrame_dictionary[day].keys():
                self.assertEqual(found_day_level_medical_center_level_original_DataFrame_dictionary[day][medical_center].shape[0], day_level_medical_center_level_DataFrame_dictionary[day][medical_center].shape[0] - number_of_test_days_in_DataFrame)
                self.assertEqual(found_day_level_medical_center_level_shifted_DataFrame_dictionary[day][medical_center].shape[0], day_level_medical_center_level_DataFrame_dictionary[day][medical_center].shape[0] - number_of_test_days_in_DataFrame - number_of_days_to_predict_ahead)



    def test_cluster_level_real_example(self):
        '''
        For each cluster and each day, assume the number of rows in a DataFrame is n. Then the number of rows in the original DataFrame is n - the number of test days in a DataFrame * the number of medical centers in the cluster; the number of rows in the shifted DataFrame is n - the number of test days in a DataFrame * the number of medical centers in the cluster - the number of days to predict ahead * the number of medical centers in the cluster
        '''
        number_of_days_for_testing = 3
        number_of_test_days_in_DataFrame = 1
        number_of_days_to_predict_ahead = 2
        dataset = DataImputationAndAveraging(dataset_path='../../../data/coviddata07292020.csv', number_of_days_for_data_averaging=3, filter_by_medical_center=True, filter_by_time_period=True).get_processed_dataset()
        dataDelimitingByDayAndMedicalCenter = DataDelimitingByDayAndMedicalCenter(dataset, number_of_days_for_testing, number_of_days_to_predict_ahead)
        dataCluseteringAndNormalization = DataCluseteringAndNormalization(dataDelimitingByDayAndMedicalCenter, number_of_test_day_in_day_level_DataFrame=1, max_number_of_cluster=10)

        dataPreparationForFeatureSelection = DataPreparationForFeatureSelection(dataCluseteringAndNormalization.day_level_cluster_level_not_normalized_combined_DataFrame_dictionary, number_of_test_days_in_DataFrame=number_of_test_days_in_DataFrame, number_of_days_to_predict_ahead=number_of_days_to_predict_ahead)
        found_day_level_cluster_level_original_DataFrame_dictionary = dataPreparationForFeatureSelection.day_level_agency_level_original_train_DataFrame_dictionary
        found_day_level_cluster_level_shifted_DataFrame_dictionary = dataPreparationForFeatureSelection.day_level_agency_level_shifted_train_DataFrame_dictionary

        for day in found_day_level_cluster_level_original_DataFrame_dictionary.keys():
            for cluster in found_day_level_cluster_level_original_DataFrame_dictionary[day].keys():
                number_of_medical_centers_in_cluster = len(found_day_level_cluster_level_original_DataFrame_dictionary[day][cluster].clinic.unique())
                # do not check for medical center codes
                self.assertEqual(found_day_level_cluster_level_original_DataFrame_dictionary[day][cluster].shape[0], dataCluseteringAndNormalization.day_level_cluster_level_not_normalized_combined_DataFrame_dictionary[day][cluster].shape[0] - number_of_test_days_in_DataFrame * number_of_medical_centers_in_cluster)
                self.assertEqual(found_day_level_cluster_level_shifted_DataFrame_dictionary[day][cluster].shape[0], dataCluseteringAndNormalization.day_level_cluster_level_not_normalized_combined_DataFrame_dictionary[day][cluster].shape[0] - number_of_test_days_in_DataFrame * number_of_medical_centers_in_cluster - number_of_days_to_predict_ahead * number_of_medical_centers_in_cluster)
                shifted_first_day = found_day_level_cluster_level_shifted_DataFrame_dictionary[day][cluster].sort_index().index[0]
                pd.testing.assert_frame_equal(found_day_level_cluster_level_original_DataFrame_dictionary[day][cluster].sort_index().loc[shifted_first_day:].sort_values(['clinic', 'date']), found_day_level_cluster_level_shifted_DataFrame_dictionary[day][cluster])
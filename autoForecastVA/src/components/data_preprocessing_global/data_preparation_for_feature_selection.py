'''
Given a delimited data, for each day and medical center, it shifts the data back by the number of days to predict ahead to generate X.
'''
import pandas as pd
class DataPreparationForFeatureSelection():
    def __init__(self, day_level_agency_level_DataFrame_dictionary=None, number_of_test_days_in_DataFrame=1, number_of_days_to_predict_ahead=1, lazy=False):
        '''
        :param day_level_agency_level_DataFrame_dictionary: this needs to be a full day level dataframe (includes both training and testing data); the agency could be a medical center or a cluster of medical centers
        :param number_of_test_days_in_DataFrame: The number of test days in the bottom of a day-level medical center-level DataFrame (generated by the data demilimiting part).
        '''

        self.day_level_agency_level_DataFrame_dictionary = day_level_agency_level_DataFrame_dictionary
        self.number_of_test_day_in_DataFrame = number_of_test_days_in_DataFrame
        self.number_of_days_to_predict_ahead = number_of_days_to_predict_ahead
        self.day_level_agency_level_original_train_DataFrame_dictionary = {}
        self.day_level_agency_level_shifted_train_DataFrame_dictionary = {}
        if not lazy:
            self.prepare_data_for_feature_selection()

    def prepare_data_for_feature_selection(self):
        for day in self.day_level_agency_level_DataFrame_dictionary.keys():
            agency_level_original_train_DataFrame = {}
            agency_level_shifted_train_DataFrame = {}

            for agency in self.day_level_agency_level_DataFrame_dictionary[day].keys():
                DataFrame = self.day_level_agency_level_DataFrame_dictionary[day][agency]

                DataFrame_date_range = DataFrame.index.unique()[:-self.number_of_test_day_in_DataFrame]
                original_first_day = DataFrame_date_range[0]
                original_last_day = DataFrame_date_range[-1]
                shifted_first_day = DataFrame_date_range[0] + pd.Timedelta(self.number_of_days_to_predict_ahead, unit='d')
                agency_level_original_train_DataFrame[agency] = DataFrame.sort_index().loc[original_first_day: original_last_day].sort_values(by=['clinic', 'date'])
                agency_level_shifted_train_DataFrame[agency] = DataFrame.sort_index().loc[shifted_first_day: original_last_day].sort_values(by=['clinic', 'date'])

            self.day_level_agency_level_original_train_DataFrame_dictionary[day] = agency_level_original_train_DataFrame
            self.day_level_agency_level_shifted_train_DataFrame_dictionary[day] = agency_level_shifted_train_DataFrame